name: build-and-run-jvm-tests
description: |
   Build the project and run JVM tests. 
   Prerequisites: 
     * java must be installed'

inputs:
  run-native-tests:
    description: |
      If true, the native tests will be run in addition to JVM tests; otherwise only JVM tests will be run
    default: 'false'
  upload-local-maven-repo-archive:
    description: |
      If true, the local Maven repository will be tar-gzipped and uploaded using actions/upload-artifact;
      otherwise it will neither be tar-gzipped nor uploaded
    default: 'true'
  token:
    description: "The token to use to authenticate against GitHub API"
    required: true

outputs:
  exit-message-path:
    description: |
      A path to a file storing the error message describing the build outcome.
      Available only with exit-status failure.
      We pass the message in a file because it may contain markdown formatting, such as backticks
      which break GH Actions's placeholder expansion within shell scripts. 
    value: ${{ steps.set-outputs.outputs.exit-message-path }}
  exit-status:
    description: |
      A short string describing build outcome. 
      It can be one of the following:
        * success
        * failure
    value: ${{ steps.set-outputs.outputs.exit-status }}

runs:
  using: 'composite'
  steps:

    - name: Ensure mvn cq:sync-versions -N causes no changes
      shell: bash
      run: |
        ./mvnw cq:sync-versions -Dcq.simpleElementWhitespace=AUTODETECT_PREFER_SPACE -N -B -ntp
        [[ -z $(git status --porcelain | grep -v antora.yml) ]] || {
          echo 'There are uncommitted changes after mvn cq:sync-versions'
          git status
          git diff

          mkdir -p ~/build-data \
            && echo "failure" > ~/build-data/exit-status \
            && printf 'There are uncommitted changes after `mvn cq:sync-versions`:\n\n```\n%s\n```' "$(git diff)" > ~/build-data/exit-message

          exit 1
        }

    - name: mvn install
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        mkdir -p ~/build-data \
          && ./mvnw -B install -fae -ntp ${{ inputs.run-native-tests == 'true' && '-Pnative -Dquarkus.native.container-build' || '' }} 2>&1 \
            | tee ~/build-data/build.log

    - name: Set exit status after mvn install
      if: ${{ failure() }}
      shell: bash
      run: |
        if [ ! -e ~/build-data/exit-status ]; then
          # do not overwrite previous status and message
          mkdir -p ~/build-data \
            && echo "failure" > ~/build-data/exit-status \
            && printf '`mvn install` failed:\n\n```\n' > ~/build-data/exit-message \
            && grep ' FAILURE ' ~/build-data/build.log | sed 's|.*\[INFO\] ||' >> ~/build-data/exit-message \
            && printf '...\n' >> ~/build-data/exit-message \
            && grep 'Failed to execute goal' ~/build-data/build.log >> ~/build-data/exit-message \
            && printf '```' >> ~/build-data/exit-message
        else 
          echo "~/build-data/exit-status exists already"
        fi

    # Same as the previous but only JVM tests and different default ConduitFactory
    - name: QUARKUS_CXF_DEFAULT_HTTP_CONDUIT_FACTORY=URLConnectionHTTPConduitFactory mvn clean install
      shell: bash
      env: 
        GITHUB_TOKEN: ${{ inputs.token }}
        QUARKUS_CXF_DEFAULT_HTTP_CONDUIT_FACTORY: URLConnectionHTTPConduitFactory
      run: |
        mkdir -p ~/build-data \
          && ./mvnw -B clean install -pl '!docs' -fae -ntp ${{ inputs.run-native-tests == 'true' && '-Pnative -Dquarkus.native.container-build' || '' }} 2>&1 \
            | tee ~/build-data/build.log

    - name: Set exit status after QUARKUS_CXF_DEFAULT_HTTP_CONDUIT_FACTORY=URLConnectionHTTPConduitFactory mvn clean install
      if: ${{ failure() }}
      shell: bash
      run: |
        if [ ! -e ~/build-data/exit-status ]; then
          # do not overwrite previous status and message
          mkdir -p ~/build-data \
            && echo "failure" > ~/build-data/exit-status \
            && printf '`QUARKUS_CXF_DEFAULT_HTTP_CONDUIT_FACTORY=URLConnectionHTTPConduitFactory mvn clean install` failed:\n\n```\n' > ~/build-data/exit-message \
            && grep ' FAILURE ' ~/build-data/build.log | sed 's|.*\[INFO\] ||' >> ~/build-data/exit-message \
            && printf '...\n' >> ~/build-data/exit-message \
            && grep 'Failed to execute goal' ~/build-data/build.log >> ~/build-data/exit-message \
            && printf '```' >> ~/build-data/exit-message
        else 
          echo "~/build-data/exit-status exists already"
        fi

    - name: Ensure mvn install -N caused no changes
      shell: bash
      run: |
        [[ -z $(git status --porcelain | grep -v antora.yml) ]] || {
          echo 'There are uncommitted changes after mvn install'
          git status
          git diff

          mkdir -p ~/build-data \
            && echo "failure" > ~/build-data/exit-status \
            && printf 'There are uncommitted changes after `mvn install`:\n\n```\n%s\n```' "$(git diff)" > ~/build-data/exit-message

          exit 1
        }

    - name: Create ${{ runner.temp }}/maven-repo.tgz
      if: ${{ inputs.upload-local-maven-repo-archive == 'true' }}
      shell: bash
      run: |
        tar -czf ${{ runner.temp }}/maven-repo.tgz -C ~ .m2/repository
    - name: Upload ${{ runner.temp }}/maven-repo.tgz
      if: ${{ inputs.upload-local-maven-repo-archive == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: maven-repo
        path: ${{ runner.temp }}/maven-repo.tgz
        retention-days: 1

    - name: Avoid caching SNAPSHOT artifacts in local Maven repository
      shell: bash
      run: |
        # remove SNAPSHOT artifacts
        find ~/.m2/repository -type d -name '*-SNAPSHOT' -exec rm -r {} +

    - name: Set outputs
      id: set-outputs
      if: ${{ always() }}
      shell: bash
      run: |
        if [ ! -f ~/build-data/exit-status ] || [ "$(cat ~/build-data/exit-status 2> /dev/null)" = "success" ]; then
          echo 'exit-status=success'
          echo 'exit-status=success' >> $GITHUB_OUTPUT
          echo 'exit-message-path=' >> $GITHUB_OUTPUT
        else
          if [ ! -e ~/build-data/exit-status ]; then
            mkdir -p ~/build-data
            echo "failure" > ~/build-data/exit-status
          fi
          printf 'exit-status=%s' "$(cat ~/build-data/exit-status)" >> $GITHUB_OUTPUT

          if [ ! -e ~/build-data/exit-message ]; then
            mkdir -p ~/build-data
            echo "Unknown failure" > ~/build-data/exit-message
          fi
          echo "exit-message-path=$HOME/build-data/exit-message" >> $GITHUB_OUTPUT
          
          echo "Stored exit-status value: $(cat ~/build-data/exit-status)"
          echo "Stored exit-message value:"
          echo ""
          cat ~/build-data/exit-message
          echo ""
        fi
